{"version":3,"sources":["app/App.module.css","api/todolists-api.ts","reportWebVitals.ts","features/TodolistsList/todolists-reducer.ts","utils/util-error.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/tasks-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["module","exports","TaskStatuses","TaskPriorities","ResultCode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","authAPI","email","password","rememberMe","post","get","delete","todolistsAPI","title","id","put","todolistId","taskId","model","initialState","removeTodolistAC","type","changeTodolistTitleAC","setTodolistEntityStatusAC","entityStatus","handleServerAppError","res","dispatch","resultCode","error","setAppErrorAC","messages","startTodolistChange","setAppStatusAC","handleServerNetworkErrorTodolist","message","startTaskChange","setTaskEntityStatusAC","handleServerNetworkErrorTask","isLoggedIn","setIsLoggedInAC","payload","status","isInitialized","removeTaskAC","updateTaskAC","setTasksAC","tasks","updateTaskTC","domainModel","getState","a","state","task","find","t","console","warn","apiModel","deadline","description","priority","startDate","data","success","rootReducer","combineReducers","action","filter","todoListId","map","todolist","copyState","todolists","forEach","tl","app","login","store","createStore","applyMiddleware","thunkMiddleware","useAppSelector","useSelector","window","AddItemForm","React","memo","props","useState","setTitle","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","disabled","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","useDispatch","useEffect","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistTC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","justifyContent","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackBar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","validate","values","errors","test","length","onSubmit","resetForm","handleSubmit","FormControl","FormLabel","href","target","FormGroup","getFieldProps","margin","touched","FormControlLabel","control","App","linerProgress","AppBar","position","Toolbar","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb46e9eb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"appBar\":\"App_appBar__2VLB6\"};","import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '9359a22e-adad-4c18-8f69-1475882f26c8',\r\n    }\r\n})\r\n\r\n//authAPI\r\nexport const authAPI = {\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>('auth/login', {\r\n            email, password, rememberMe\r\n        })\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{\r\n            userId: number\r\n            email: string\r\n            login: string\r\n        }>>('auth/me')\r\n    },\r\n    logOut() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    }\r\n}\r\n\r\n// todolistAPI\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport enum ResultCode {\r\n    success = 0,\r\n    error = 1\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {ResultCode, todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {AppThunk} from \"../../app/store\";\r\nimport {setAppErrorAC, setAppStatusAC, RequestStatusType} from \"../../app/app-reducer\";\r\nimport {handleServerNetworkErrorTodolist, handleServerAppError, startTodolistChange} from \"../../utils/util-error\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: TodolistsActionType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case \"SET-TODOLIST-ENTITY-STATUS\":\r\n            return state.map(t => t.id === action.id ? {...t, entityStatus: action.entityStatus} : {...t})\r\n        case \"CLEAR-TODOLISTS\":\r\n            return []\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\nexport const setTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => {\r\n    return {\r\n        type: 'SET-TODOLIST-ENTITY-STATUS',\r\n        entityStatus,\r\n        id\r\n    } as const\r\n}\r\nexport const clearTodolists = () => {\r\n    return {type: 'CLEAR-TODOLISTS'} as const\r\n}\r\n\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = (): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        const res = await todolistsAPI.getTodolists()\r\n        dispatch(setTodolistsAC(res.data))\r\n    } catch (error: any) {\r\n        dispatch(setAppErrorAC(error.message))\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"succeeded\"))\r\n    }\r\n}\r\nexport const removeTodolistTC = (id: string): AppThunk => async dispatch => {\r\n    startTodolistChange(id, dispatch)\r\n    try {\r\n        const res = await todolistsAPI.deleteTodolist(id)\r\n        dispatch(removeTodolistAC(id))\r\n        dispatch(setTodolistEntityStatusAC(id, 'succeeded'))\r\n    } catch (error: any) {\r\n        handleServerNetworkErrorTodolist(id, error.message, dispatch)\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"succeeded\"))\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        const res = await todolistsAPI.createTodolist(title)\r\n        res.data.resultCode === ResultCode.success ? dispatch(addTodolistAC(res.data.data.item))\r\n            : handleServerAppError(res.data, dispatch)\r\n    } catch (error: any) {\r\n        dispatch(setAppErrorAC(error.message))\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"succeeded\"))\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string): AppThunk => async dispatch => {\r\n    startTodolistChange(id, dispatch)\r\n    try {\r\n        const res = await todolistsAPI.updateTodolist(id, title)\r\n        dispatch(changeTodolistTitleAC(id, title))\r\n        dispatch(setTodolistEntityStatusAC(id, 'succeeded'))\r\n    } catch (error: any) {\r\n        handleServerNetworkErrorTodolist(id, error.message, dispatch)\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"succeeded\"))\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type TodolistsActionType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTodolistEntityStatusAC>\r\n    | ReturnType<typeof clearTodolists>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {setAppErrorAC, setAppStatusAC} from \"../app/app-reducer\";\r\nimport {setTodolistEntityStatusAC} from \"../features/TodolistsList/todolists-reducer\";\r\nimport {AppActionType} from \"../app/store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setTaskEntityStatusAC} from \"../features/TodolistsList/tasks-reducer\";\r\nimport {ResponseType, ResultCode} from \"../api/todolists-api\"\r\n\r\n//common\r\nexport const handleServerAppError = <T>(res: ResponseType<T>, dispatch: Dispatch<AppActionType>) => {\r\n    if (res.resultCode === ResultCode.error) {\r\n        dispatch(setAppErrorAC(res.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n}\r\n\r\n\r\n//todolist\r\nexport const startTodolistChange = (id: string, dispatch: Dispatch<AppActionType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    dispatch(setTodolistEntityStatusAC(id, 'loading'))\r\n}\r\n\r\nexport const handleServerNetworkErrorTodolist = (id: string, error: { message: string }, dispatch: Dispatch<AppActionType>) => {\r\n    dispatch(setTodolistEntityStatusAC(id, 'failed'))\r\n    dispatch(setAppErrorAC(error.message))\r\n}\r\n\r\n\r\n//task\r\nexport const startTaskChange = (taskId: string, todolistId: string, dispatch: Dispatch<AppActionType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    dispatch(setTaskEntityStatusAC(taskId, todolistId, 'loading'))\r\n}\r\n\r\nexport const handleServerNetworkErrorTask = (taskId: string, todolistId: string, error: { message: string }, dispatch: Dispatch<AppActionType>) => {\r\n    dispatch(setTaskEntityStatusAC(taskId, todolistId, 'failed'))\r\n    dispatch(setAppErrorAC(error.message))\r\n}","import {setAppErrorAC, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {AppThunk} from \"../../app/store\";\r\nimport {authAPI, ResultCode} from \"../../api/todolists-api\";\r\nimport {handleServerAppError} from \"../../utils/util-error\";\r\nimport {clearTodolists} from \"../TodolistsList/todolists-reducer\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (isLoggedIn: boolean) => ({\r\n    type: 'login/SET-IS-LOGGED-IN',\r\n    payload: {isLoggedIn}\r\n} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: loginTCType): AppThunk => async (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res = await authAPI.login(data.email, data.password, data.rememberMe)\r\n        res.data.resultCode === ResultCode.success ?\r\n            dispatch(setIsLoggedInAC(true))\r\n            : handleServerAppError(res.data, dispatch)\r\n    } catch (error: any) {\r\n        dispatch(setAppErrorAC(error.message))\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"succeeded\"))\r\n    }\r\n}\r\n\r\nexport const logOutTC = (): AppThunk => async (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res = await authAPI.logOut()\r\n        res.data.resultCode === ResultCode.success ?\r\n            dispatch(setIsLoggedInAC(false))\r\n            : handleServerAppError(res.data, dispatch)\r\n        dispatch(clearTodolists())\r\n    } catch (error: any) {\r\n        dispatch(setAppErrorAC(error.message))\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"succeeded\"))\r\n    }\r\n}\r\n\r\n\r\n// types\r\ntype loginTCType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport type AuthActionsType = ReturnType<typeof setIsLoggedInAC>","import {AppThunk} from \"./store\";\r\nimport {authAPI, ResultCode} from \"../api/todolists-api\";\r\nimport {handleServerAppError} from \"../utils/util-error\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false,\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppRedActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, ...action.payload}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, ...action.payload}\r\n        case \"APP/SET-IS-INITIALIZED\":\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n    return {\r\n        type: 'APP/SET-STATUS',\r\n        payload: {\r\n            status\r\n        }\r\n    }\r\n}\r\nexport const setAppErrorAC = (error: string | null) => {\r\n    return {\r\n        type: 'APP/SET-ERROR',\r\n        payload: {\r\n            error\r\n        }\r\n    }\r\n}\r\n\r\nexport const setIsInitializedAC = (isInitialized: boolean) => {\r\n    return {\r\n        type: 'APP/SET-IS-INITIALIZED', payload: {\r\n            isInitialized\r\n        }\r\n    } as const\r\n}\r\n\r\n\r\n//thunk\r\nexport const initializeAppTC = (): AppThunk => async (dispatch) => {\r\n    const res = await authAPI.me()\r\n    res.data.resultCode === ResultCode.success ?\r\n        dispatch(setIsLoggedInAC(true))\r\n        : handleServerAppError(res.data, dispatch)\r\n    dispatch(setIsInitializedAC(true))\r\n}\r\n\r\nexport type AppRedActionType =\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setIsInitializedAC>\r\n","import {\r\n    AddTodolistActionType,\r\n    clearTodolists,\r\n    RemoveTodolistActionType,\r\n    SetTodolistsActionType\r\n} from './todolists-reducer'\r\nimport {\r\n    ResultCode,\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    UpdateTaskModelType\r\n} from '../../api/todolists-api'\r\nimport {AppThunk} from '../../app/store'\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkErrorTask, startTaskChange} from \"../../utils/util-error\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: TaskActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]:\r\n                    [{...action.task, entityStatus: 'idle'},\r\n                        ...state[action.task.todoListId]]\r\n            }\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks.map(t => ({...t, entityStatus: 'idle'}))}\r\n        case \"SET-TASK-ENTITY-STATUS\":\r\n            return {\r\n                ...state, [action.todolistId]: [...state[action.todolistId].map(t => t.id === action.id ?\r\n                    {...t, entityStatus: action.entityStatus} : {...t})]\r\n            }\r\n        case \"CLEAR-TODOLISTS\":\r\n            return {}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({\r\n        type: 'ADD-TASK', task\r\n    } as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\nexport const setTaskEntityStatusAC = (id: string, todolistId: string, entityStatus: RequestStatusType) => {\r\n    return {\r\n        type: 'SET-TASK-ENTITY-STATUS',\r\n        entityStatus,\r\n        id,\r\n        todolistId\r\n    } as const\r\n}\r\n\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        const res = await todolistsAPI.getTasks(todolistId)\r\n        dispatch(setTasksAC(res.data.items, todolistId))\r\n    } catch (error: any) {\r\n        dispatch(setAppErrorAC(error.message))\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"succeeded\"))\r\n    }\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string): AppThunk => async dispatch => {\r\n    startTaskChange(taskId, todolistId, dispatch)\r\n    try {\r\n        const res = await todolistsAPI.deleteTask(todolistId, taskId)\r\n        dispatch(removeTaskAC(taskId, todolistId))\r\n        dispatch(setTaskEntityStatusAC(taskId, todolistId, 'succeeded'))\r\n        dispatch(setAppStatusAC(\"succeeded\"))\r\n    } catch (error: any) {\r\n        handleServerNetworkErrorTask(taskId, todolistId, error, dispatch)\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"succeeded\"))\r\n    }\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        const res = await todolistsAPI.createTask(todolistId, title)\r\n        res.data.resultCode === ResultCode.success ?\r\n            dispatch(addTaskAC(res.data.data.item))\r\n            : handleServerAppError(res.data, dispatch)\r\n\r\n    } catch (error: any) {\r\n        dispatch(setAppErrorAC(error.message))\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"succeeded\"))\r\n    }\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string): AppThunk => {\r\n    return async (dispatch, getState) => {\r\n        startTaskChange(taskId, todolistId, dispatch)\r\n\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        try {\r\n            const res = await todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            res.data.resultCode === ResultCode.success ? dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n                : handleServerAppError(res.data, dispatch)\r\n            dispatch(setTaskEntityStatusAC(taskId, todolistId, 'succeeded'))\r\n        } catch (error: any) {\r\n            handleServerNetworkErrorTask(taskId, todolistId, error, dispatch)\r\n        } finally {\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskDomainType>\r\n}\r\nexport type TaskActionType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof setTaskEntityStatusAC>\r\n    | ReturnType<typeof clearTodolists>\r\n\r\nexport type TaskDomainType = TaskType & {\r\n    entityStatus: RequestStatusType\r\n}","import {TaskActionType, tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {TodolistsActionType, todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk'\r\nimport {AppRedActionType, appReducer} from './app-reducer';\r\nimport {AuthActionsType, authReducer} from '../features/Login/auth-reducer';\r\nimport {TypedUseSelectorHook, useSelector} from 'react-redux';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    login: authReducer,\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\n//type\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppActionType = TodolistsActionType | TaskActionType | AppRedActionType | AuthActionsType\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppActionType>\r\n\r\n//customUseSelector\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {AddBox} from '@mui/icons-material';\r\nimport {RequestStatusType} from '../../app/app-reducer';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: RequestStatusType\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField\r\n            variant=\"outlined\"\r\n            error={!!error}\r\n            value={title}\r\n            onChange={onChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            label=\"Title\"\r\n            helperText={error}\r\n            disabled={props.disabled === 'loading'}\r\n        />\r\n        <IconButton\r\n            color=\"primary\"\r\n            onClick={addItem}\r\n            disabled={props.disabled === 'loading'}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport {RequestStatusType} from '../../app/app-reducer';\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    disabled: RequestStatusType\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        if (props.disabled !== 'loading') {\r\n            setEditMode(true);\r\n            setTitle(props.value);\r\n        } else {\r\n            return\r\n        }\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}\r\n        >{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\nimport {Delete} from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {RequestStatusType} from '../../../../app/app-reducer';\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    entityStatus: RequestStatusType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan\r\n            value={props.task.title}\r\n            onChange={onTitleChangeHandler}\r\n            disabled={props.entityStatus}\r\n        />\r\n        <IconButton onClick={onClickHandler} disabled={props.entityStatus === 'loading'}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC, TaskDomainType} from '../tasks-reducer'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport {Delete} from '@mui/icons-material';\r\n\r\ntype PropsType = {\r\n    tasks: Array<TaskDomainType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    todolist: TodolistDomainType\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.todolist.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan\r\n            value={props.todolist.title}\r\n            onChange={changeTodolistTitle}\r\n            disabled={props.todolist.entityStatus}\r\n        />\r\n            <IconButton\r\n                onClick={removeTodolist}\r\n                disabled={props.todolist.entityStatus === 'loading'}\r\n            >\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                                                entityStatus={t.entityStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch} from 'react-redux'\r\nimport {useAppSelector} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\n\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {Navigate} from 'react-router-dom';\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n    const todolists = useAppSelector<Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useAppSelector<TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useAppSelector<boolean>(state =>\r\n        state.login.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) return\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTaskTC(id, todolistId))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskTC(title, todolistId))\r\n    }, [])\r\n\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, {status}, todolistId))\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, {title: newTitle}, todolistId))\r\n    }, [])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        dispatch(changeTodolistFilterAC(todolistId, value))\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(removeTodolistTC(id))\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\r\n        dispatch(changeTodolistTitleTC(id, title))\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) return <Navigate to=\"/login\"/>\r\n    return <>\r\n        <Grid container style={{padding: '20px'}} justifyContent=\"center\">\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3} justifyContent=\"center\">\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useAppSelector} from '../../app/store';\r\nimport {useDispatch} from 'react-redux';\r\nimport {setAppErrorAC} from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport const ErrorSnackBar = () => {\r\n    const error = useAppSelector<string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={2000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch} from 'react-redux';\r\nimport {loginTC} from './auth-reducer';\r\nimport {useAppSelector} from '../../app/store';\r\nimport {Navigate} from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\nexport const Login = () => {\r\n    const isLoggedIn = useAppSelector<boolean>(state =>\r\n        state.login.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (values.password.length < 3) errors.password = 'The password is too short'\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n    if (isLoggedIn) return <Navigate to=\"/\"/>\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            {...formik.getFieldProps('email')}\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                        />\r\n                        {formik.touched.email && formik.errors.email &&\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField\r\n                            {...formik.getFieldProps('password')}\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox/>}\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                            checked={formik.values.rememberMe}\r\n                        />\r\n                        <Button\r\n                            type={'submit'}\r\n                            variant={'contained'}\r\n                            color={'primary'}\r\n                        >\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React, {useEffect} from 'react'\r\nimport './App.module.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {useDispatch} from 'react-redux';\r\nimport {useAppSelector} from './store';\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer';\r\nimport {ErrorSnackBar} from '../components/ErrorSnackBar/ErrorSnackBar';\r\nimport {Navigate, Route, Routes} from 'react-router-dom';\r\nimport {Login} from '../features/Login/Login';\r\nimport {CircularProgress} from '@mui/material';\r\nimport {logOutTC} from '../features/Login/auth-reducer';\r\nimport Grid from '@mui/material/Grid';\r\n\r\n\r\nfunction App() {\r\n    const linerProgress = useAppSelector<RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useAppSelector<boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useAppSelector<boolean>(state => state.login.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n    const logOutHandler = () => dispatch(logOutTC())\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    return (\r\n        <div>\r\n            <ErrorSnackBar/>\r\n            <AppBar position=\"static\">\r\n                {isLoggedIn ? <Grid container\r\n                                    justifyContent=\"space-between\">\r\n                        <div style={{width: 50}}></div>\r\n                        <Toolbar>\r\n                            <Typography variant=\"h5\">\r\n                                To do list\r\n                            </Typography>\r\n                        </Toolbar>\r\n                        {isLoggedIn && <Button onClick={logOutHandler} color=\"inherit\">Log out</Button>}\r\n                    </Grid> :\r\n                    <Grid container\r\n                          justifyContent=\"center\">\r\n                        <Toolbar>\r\n                            <Typography variant=\"h5\">\r\n                                To do list\r\n                            </Typography>\r\n                        </Toolbar>\r\n                    </Grid>}\r\n            </AppBar>\r\n            {linerProgress === 'loading' && <LinearProgress/>}\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path=\"/\" element={<TodolistsList/>}/>\r\n                    <Route path=\"/login\" element={<Login/>}/>\r\n                    <Route path=\"/404\" element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Route path=\"*\" element={<Navigate to=\"/404\"/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}