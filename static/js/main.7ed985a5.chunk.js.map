{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","features/TodolistsList/tasks-reducer.ts","utils/util-error.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","ResultCode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","authAPI","email","password","rememberMe","post","get","delete","todolistsAPI","title","id","put","todolistId","taskId","model","initialState","removeTaskAC","type","updateTaskAC","setTasksAC","tasks","setTaskEntityStatusAC","entityStatus","updateTaskTC","domainModel","dispatch","getState","a","startTaskChange","state","task","find","t","console","warn","apiModel","deadline","description","priority","startDate","status","res","data","resultCode","success","handleServerAppError","handleServerNetworkErrorTask","setAppStatusAC","error","setAppErrorAC","messages","startTodolistChange","setTodolistEntityStatusAC","handleServerNetworkErrorTodolist","message","isLoggedIn","setIsLoggedInAC","payload","isInitialized","removeTodolistAC","changeTodolistTitleAC","clearTodolists","AddItemForm","React","memo","props","log","useState","setTitle","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","disabled","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","useDispatch","useEffect","thunk","todolist","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","login","removeTaskTC","item","addTaskTC","changeStatus","newTitle","action","removeTodolistTC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackBar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","validate","values","errors","test","length","onSubmit","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","getFieldProps","margin","touched","FormControlLabel","control","App","linerProgress","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ed985a5.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '9359a22e-adad-4c18-8f69-1475882f26c8',\r\n    }\r\n})\r\n\r\n//authAPI\r\nexport const authAPI = {\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>('auth/login', {\r\n            email, password, rememberMe\r\n        })\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{\r\n            userId: number\r\n            email: string\r\n            login: string\r\n        }>>('auth/me')\r\n    },\r\n    logOut() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    }\r\n}\r\n\r\n// todolistAPI\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport enum ResultCode {\r\n    success = 0,\r\n    error = 1\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\r\n    AddTodolistActionType,\r\n    clearTodolists,\r\n    RemoveTodolistActionType,\r\n    SetTodolistsActionType\r\n} from './todolists-reducer'\r\nimport {\r\n    ResultCode,\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    UpdateTaskModelType\r\n} from '../../api/todolists-api'\r\nimport {AppThunk} from '../../app/store'\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkErrorTask, startTaskChange} from \"../../utils/util-error\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: TaskActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]:\r\n                    [{...action.task, entityStatus: 'idle'},\r\n                        ...state[action.task.todoListId]]\r\n            }\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks.map(t => ({...t, entityStatus: 'idle'}))}\r\n        case \"SET-TASK-ENTITY-STATUS\":\r\n            return {\r\n                ...state, [action.todolistId]: [...state[action.todolistId].map(t => t.id === action.id ?\r\n                    {...t, entityStatus: action.entityStatus} : {...t})]\r\n            }\r\n        case \"CLEAR-TODOLISTS\":\r\n            return {}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({\r\n        type: 'ADD-TASK', task\r\n    } as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\nexport const setTaskEntityStatusAC = (id: string, todolistId: string, entityStatus: RequestStatusType) => {\r\n    return {\r\n        type: 'SET-TASK-ENTITY-STATUS',\r\n        entityStatus,\r\n        id,\r\n        todolistId\r\n    } as const\r\n}\r\n\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        const res = await todolistsAPI.getTasks(todolistId)\r\n        dispatch(setTasksAC(res.data.items, todolistId))\r\n    } catch (error: any) {\r\n        dispatch(setAppErrorAC(error.message))\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"succeeded\"))\r\n    }\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string): AppThunk => async dispatch => {\r\n    startTaskChange(taskId, todolistId, dispatch)\r\n    try {\r\n        const res = await todolistsAPI.deleteTask(todolistId, taskId)\r\n        dispatch(removeTaskAC(taskId, todolistId))\r\n        dispatch(setTaskEntityStatusAC(taskId, todolistId, 'succeeded'))\r\n        dispatch(setAppStatusAC(\"succeeded\"))\r\n    } catch (error: any) {\r\n        handleServerNetworkErrorTask(taskId, todolistId, error, dispatch)\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"succeeded\"))\r\n    }\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        const res = await todolistsAPI.createTask(todolistId, title)\r\n        res.data.resultCode === ResultCode.success ?\r\n            dispatch(addTaskAC(res.data.data.item))\r\n            : handleServerAppError(res.data, dispatch)\r\n\r\n    } catch (error: any) {\r\n        dispatch(setAppErrorAC(error.message))\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"succeeded\"))\r\n    }\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string): AppThunk => {\r\n    return async (dispatch, getState) => {\r\n        startTaskChange(taskId, todolistId, dispatch)\r\n\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        try {\r\n            const res = await todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            res.data.resultCode === ResultCode.success ? dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n                : handleServerAppError(res.data, dispatch)\r\n            dispatch(setTaskEntityStatusAC(taskId, todolistId, 'succeeded'))\r\n        } catch (error: any) {\r\n            handleServerNetworkErrorTask(taskId, todolistId, error, dispatch)\r\n        } finally {\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskDomainType>\r\n}\r\nexport type TaskActionType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof setTaskEntityStatusAC>\r\n    | ReturnType<typeof clearTodolists>\r\n\r\nexport type TaskDomainType = TaskType & {\r\n    entityStatus: RequestStatusType\r\n}","import {setAppErrorAC, setAppStatusAC} from \"../app/app-reducer\";\r\nimport {setTodolistEntityStatusAC} from \"../features/TodolistsList/todolists-reducer\";\r\nimport {AppActionType} from \"../app/store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setTaskEntityStatusAC} from \"../features/TodolistsList/tasks-reducer\";\r\nimport {ResponseType, ResultCode} from \"../api/todolists-api\"\r\n\r\n//common\r\nexport const handleServerAppError = <T>(res: ResponseType<T>, dispatch: Dispatch<AppActionType>) => {\r\n    if (res.resultCode === ResultCode.error) {\r\n        dispatch(setAppErrorAC(res.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n}\r\n\r\n\r\n//todolist\r\nexport const startTodolistChange = (id: string, dispatch: Dispatch<AppActionType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    dispatch(setTodolistEntityStatusAC(id, 'loading'))\r\n}\r\n\r\nexport const handleServerNetworkErrorTodolist = (id: string, error: { message: string }, dispatch: Dispatch<AppActionType>) => {\r\n    dispatch(setTodolistEntityStatusAC(id, 'failed'))\r\n    dispatch(setAppErrorAC(error.message))\r\n}\r\n\r\n\r\n//task\r\nexport const startTaskChange = (taskId: string, todolistId: string, dispatch: Dispatch<AppActionType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    dispatch(setTaskEntityStatusAC(taskId, todolistId, 'loading'))\r\n}\r\n\r\nexport const handleServerNetworkErrorTask = (taskId: string, todolistId: string, error: { message: string }, dispatch: Dispatch<AppActionType>) => {\r\n    dispatch(setTaskEntityStatusAC(taskId, todolistId, 'failed'))\r\n    dispatch(setAppErrorAC(error.message))\r\n}","import {setAppErrorAC, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {AppThunk} from \"../../app/store\";\r\nimport {authAPI, ResultCode} from \"../../api/todolists-api\";\r\nimport {handleServerAppError} from \"../../utils/util-error\";\r\nimport {clearTodolists} from \"../TodolistsList/todolists-reducer\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (isLoggedIn: boolean) => ({\r\n    type: 'login/SET-IS-LOGGED-IN',\r\n    payload: {isLoggedIn}\r\n} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: loginTCType): AppThunk => async (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res = await authAPI.login(data.email, data.password, data.rememberMe)\r\n        res.data.resultCode === ResultCode.success ?\r\n            dispatch(setIsLoggedInAC(true))\r\n            : handleServerAppError(res.data, dispatch)\r\n    } catch (error: any) {\r\n        dispatch(setAppErrorAC(error.message))\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"succeeded\"))\r\n    }\r\n}\r\n\r\nexport const logOutTC = (): AppThunk => async (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res = await authAPI.logOut()\r\n        res.data.resultCode === ResultCode.success ?\r\n            dispatch(setIsLoggedInAC(false))\r\n            : handleServerAppError(res.data, dispatch)\r\n        dispatch(clearTodolists())\r\n    } catch (error: any) {\r\n        dispatch(setAppErrorAC(error.message))\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"succeeded\"))\r\n    }\r\n}\r\n\r\n\r\n// types\r\ntype loginTCType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport type AuthActionsType = ReturnType<typeof setIsLoggedInAC>","import {AppThunk} from \"./store\";\r\nimport {authAPI, ResultCode} from \"../api/todolists-api\";\r\nimport {handleServerAppError} from \"../utils/util-error\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false,\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppRedActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, ...action.payload}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, ...action.payload}\r\n        case \"APP/SET-IS-INITIALIZED\":\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n    return {\r\n        type: 'APP/SET-STATUS',\r\n        payload: {\r\n            status\r\n        }\r\n    }\r\n}\r\nexport const setAppErrorAC = (error: string | null) => {\r\n    return {\r\n        type: 'APP/SET-ERROR',\r\n        payload: {\r\n            error\r\n        }\r\n    }\r\n}\r\n\r\nexport const setIsInitializedAC = (isInitialized: boolean) => {\r\n    return {\r\n        type: 'APP/SET-IS-INITIALIZED', payload: {\r\n            isInitialized\r\n        }\r\n    } as const\r\n}\r\n\r\n\r\n//thunk\r\nexport const initializeAppTC = (): AppThunk => async (dispatch) => {\r\n    const res = await authAPI.me()\r\n    res.data.resultCode === ResultCode.success ?\r\n        dispatch(setIsLoggedInAC(true))\r\n        : handleServerAppError(res.data, dispatch)\r\n    dispatch(setIsInitializedAC(true))\r\n}\r\n\r\nexport type AppRedActionType =\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setIsInitializedAC>\r\n","import {ResultCode, todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {AppThunk} from \"../../app/store\";\r\nimport {setAppErrorAC, setAppStatusAC, RequestStatusType} from \"../../app/app-reducer\";\r\nimport {handleServerNetworkErrorTodolist, handleServerAppError, startTodolistChange} from \"../../utils/util-error\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: TodolistsActionType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case \"SET-TODOLIST-ENTITY-STATUS\":\r\n            return state.map(t => t.id === action.id ? {...t, entityStatus: action.entityStatus} : {...t})\r\n        case \"CLEAR-TODOLISTS\":\r\n            return []\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\nexport const setTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => {\r\n    return {\r\n        type: 'SET-TODOLIST-ENTITY-STATUS',\r\n        entityStatus,\r\n        id\r\n    } as const\r\n}\r\nexport const clearTodolists = () => {\r\n    return {type: 'CLEAR-TODOLISTS'} as const\r\n}\r\n\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = (): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        const res = await todolistsAPI.getTodolists()\r\n        dispatch(setTodolistsAC(res.data))\r\n    } catch (error: any) {\r\n        dispatch(setAppErrorAC(error.message))\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"succeeded\"))\r\n    }\r\n}\r\nexport const removeTodolistTC = (id: string): AppThunk => async dispatch => {\r\n    startTodolistChange(id, dispatch)\r\n    try {\r\n        const res = await todolistsAPI.deleteTodolist(id)\r\n        dispatch(removeTodolistAC(id))\r\n        dispatch(setTodolistEntityStatusAC(id, 'succeeded'))\r\n    } catch (error: any) {\r\n        handleServerNetworkErrorTodolist(id, error.message, dispatch)\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"succeeded\"))\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        const res = await todolistsAPI.createTodolist(title)\r\n        res.data.resultCode === ResultCode.success ? dispatch(addTodolistAC(res.data.data.item))\r\n            : handleServerAppError(res.data, dispatch)\r\n    } catch (error: any) {\r\n        dispatch(setAppErrorAC(error.message))\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"succeeded\"))\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string): AppThunk => async dispatch => {\r\n    startTodolistChange(id, dispatch)\r\n    try {\r\n        const res = await todolistsAPI.updateTodolist(id, title)\r\n        dispatch(changeTodolistTitleAC(id, title))\r\n        dispatch(setTodolistEntityStatusAC(id, 'succeeded'))\r\n    } catch (error: any) {\r\n        handleServerNetworkErrorTodolist(id, error.message, dispatch)\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"succeeded\"))\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type TodolistsActionType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTodolistEntityStatusAC>\r\n    | ReturnType<typeof clearTodolists>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {AddBox} from '@mui/icons-material';\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: RequestStatusType\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField\r\n            variant=\"outlined\"\r\n            error={!!error}\r\n            value={title}\r\n            onChange={onChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            label=\"Title\"\r\n            helperText={error}\r\n            disabled={props.disabled === 'loading'}\r\n        />\r\n        <IconButton\r\n            color=\"primary\"\r\n            onClick={addItem}\r\n            disabled={props.disabled === 'loading'}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    disabled: RequestStatusType\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        if (props.disabled !== 'loading') {\r\n            setEditMode(true);\r\n            setTitle(props.value);\r\n        } else {\r\n            return\r\n        }\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}\r\n        >{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\nimport {Delete} from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {RequestStatusType} from \"../../../../app/app-reducer\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    entityStatus: RequestStatusType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan\r\n            value={props.task.title}\r\n            onChange={onTitleChangeHandler}\r\n            disabled={props.entityStatus}\r\n        />\r\n        <IconButton onClick={onClickHandler} disabled={props.entityStatus === 'loading'}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC, TaskDomainType} from '../tasks-reducer'\r\n\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport {Delete} from '@mui/icons-material';\r\n\r\ntype PropsType = {\r\n    tasks: Array<TaskDomainType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    todolist: TodolistDomainType\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan\r\n            value={props.todolist.title}\r\n            onChange={changeTodolistTitle}\r\n            disabled={props.todolist.entityStatus}\r\n        />\r\n            <IconButton\r\n                onClick={removeTodolist}\r\n                disabled={props.todolist.entityStatus === 'loading'}\r\n            >\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                                                entityStatus={t.entityStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\n\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {initializeAppTC} from \"../../app/app-reducer\";\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state =>\r\n        state.login.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) return\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) return <Navigate to='/login'/>\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React, {useState} from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport const ErrorSnackBar = () => {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={2000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Navigation} from \"@mui/icons-material\";\r\nimport {Navigate} from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state =>\r\n        state.login.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (values.password.length < 3) errors.password = 'The password is too short'\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n    if (isLoggedIn) return <Navigate to='/'/>\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            {...formik.getFieldProps('email')}\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                        />\r\n                        {formik.touched.email && formik.errors.email &&\r\n                            <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n                        <TextField\r\n                            {...formik.getFieldProps('password')}\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                            <div style={{color: \"red\"}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox/>}\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                            checked={formik.values.rememberMe}\r\n                        />\r\n                        <Button\r\n                            type={'submit'}\r\n                            variant={'contained'}\r\n                            color={'primary'}\r\n                        >\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\n\r\n// You can learn about the difference by reading this guide on minimizing bundle size.\r\n// https://mui.com/guides/minimizing-bundle-size/\r\n// import { AppBar, Button, Container, IconButton, Toolbar, Typography } from '@mui/material';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport {Menu} from '@mui/icons-material';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackBar} from \"../components/ErrorSnackBar/ErrorSnackBar\";\r\nimport {Navigate, Route, Routes} from 'react-router-dom';\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {logOutTC} from \"../features/Login/auth-reducer\";\r\n\r\n\r\nfunction App() {\r\n    const linerProgress = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n    const logOutHandler = () => dispatch(logOutTC())\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackBar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button onClick={logOutHandler} color=\"inherit\">Log out</Button>}\r\n                </Toolbar>\r\n                {linerProgress === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path='/' element={<TodolistsList/>}/>\r\n                    <Route path='/login' element={<Login/>}/>\r\n                    <Route path='/404' element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Route path='*' element={<Navigate to='/404'/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {TaskActionType, tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {TodolistsActionType, todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk'\r\nimport {AppRedActionType, appReducer} from \"./app-reducer\";\r\nimport {AuthActionsType, authReducer} from \"../features/Login/auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    login: authReducer,\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppActionType = TodolistsActionType | TaskActionType | AppRedActionType | AuthActionsType\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppActionType>\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}