{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","TextField","helperText","label","variant","size","value","onChange","e","currentTarget","onKeyPress","key","className","Button","onClick","style","color","EditableSpan","editMode","setEditMode","autoFocus","onBlur","changeTitleTask","onDoubleClick","TodoList","tasksList","tasks","map","t","ListItem","padding","id","Checkbox","checked","isDone","changeTaskStatus","changeTaskTitle","IconButton","removeTask","Delete","allBtnClass","filter","activeBtnClass","changeTodolistTitle","removeTodolist","addTask","List","changeTodoListFilter","App","todolistId_1","v1","todolistId_2","todoLists","setTodoLists","setTasks","taskID","todolistId","newTask","addTodolist","todolistsComponents","tasksForRender","Grid","item","maxWidth","Paper","elevation","AppBar","position","Toolbar","justifyContent","edge","Menu","Typography","Container","container","spacing","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.5773d3c2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\r\nimport {IconButton, TextField, Button} from '@material-ui/core';\r\n\r\ntype PropsType = {\r\n    AddItemForm: (title: string)=>void\r\n}\r\n\r\nexport const AddItemForm = (props: PropsType) => {\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<boolean>(false)\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (error) {\r\n            setError(false)\r\n        }\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.AddItemForm(title)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle(\"\")\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField\r\n                helperText={error&&'Title is required!'}\r\n                label={'title'}\r\n                error={error}\r\n                variant={\"outlined\"}\r\n                size={\"small\"}\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressAddTask}\r\n                className={error ? \"error\" : \"\"}/>\r\n            <Button\r\n                variant={\"contained\"}\r\n                onClick={addItem}>+</Button>\r\n            {error && <div style={{color: \"red\"}}>Title is required!</div>}\r\n        </div>\r\n    )\r\n}","import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype PropsType = {\r\n    title: string\r\n    changeTitleTask: (title: string) => void\r\n}\r\n\r\n\r\nexport const EditableSpan = (props: PropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const offEditMode = () => {\r\n        props.changeTitleTask(title)\r\n        setEditMode(false)\r\n    }\r\n    const omEditMode = () => setEditMode(true)\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                value={title}\r\n                autoFocus={true}\r\n                onBlur={offEditMode}\r\n                onChange={changeTitle}/>\r\n            : <span\r\n                onDoubleClick={omEditMode}\r\n\r\n            >{props.title}</span>\r\n    )\r\n}","import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton, List, ListItem} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    removeTask: (taskID: string, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTodoListFilter: (filter: FilterValuesType, todolistId: string) => void\r\n    addTodolist: (title: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todolistId: string) => void\r\n    changeTodolistTitle: (title: string, todolistId: string) => void\r\n}\r\n\r\nfunction TodoList(props: TodoListPropsType) {\r\n    const tasksList = props.tasks.map(t => {\r\n        const changeStatus =\r\n            (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(t.id, e.currentTarget.checked, props.id)\r\n        const changeTaskTitle = (title: string) => {\r\n            props.changeTaskTitle(t.id, title, props.id)\r\n        }\r\n        return (\r\n            <ListItem\r\n                style={{padding: '0px'}}\r\n                key={t.id}>\r\n                <Checkbox\r\n                    checked={t.isDone}\r\n                    onChange={changeStatus}/>\r\n\r\n                <EditableSpan title={t.title} changeTitleTask={changeTaskTitle}/>\r\n                <IconButton onClick={() => props.removeTask(t.id, props.id)}>\r\n                    <Delete></Delete>\r\n                </IconButton>\r\n            </ListItem>\r\n        )\r\n    })\r\n\r\n    const setAllFilter = () => props.changeTodoListFilter(\"all\", props.id)\r\n    const setActiveFilter = () => props.changeTodoListFilter(\"active\", props.id)\r\n    const setCompletedFilter = () => props.changeTodoListFilter(\"completed\", props.id)\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    let allBtnClass = \"\";\r\n    if (props.filter === \"all\") {\r\n        allBtnClass = \"active-filter\"\r\n    }\r\n    const activeBtnClass = props.filter === \"active\" ? \"active-filter\" : \"\"\r\n\r\n    const changeTodolistTitle = (title: string) => {\r\n        props.changeTodolistTitle(title, props.id)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan\r\n                title={props.title}\r\n                changeTitleTask={changeTodolistTitle}/>\r\n                <IconButton onClick={() => props.removeTodolist(props.id)}>\r\n                    <Delete></Delete>\r\n                </IconButton>\r\n            </h3>\r\n\r\n            <AddItemForm AddItemForm={addTask}/>\r\n            <List>\r\n                {tasksList}\r\n            </List>\r\n            <div>\r\n                <Button\r\n                    variant={\"outlined\"}\r\n                    color={props.filter === \"all\" ? \"secondary\" : \"primary\"}\r\n                    size={\"small\"}\r\n                    className={allBtnClass}\r\n                    onClick={setAllFilter}>All\r\n                </Button>\r\n                <Button\r\n                    variant={\"outlined\"}\r\n                    color={props.filter === \"active\" ? \"secondary\" : \"primary\"}\r\n                    size={\"small\"}\r\n                    className={activeBtnClass}\r\n                    onClick={setActiveFilter}>Active\r\n                </Button>\r\n                <Button\r\n                    variant={\"outlined\"}\r\n                    color={props.filter === \"completed\" ? \"secondary\" : \"primary\"}\r\n                    size={\"small\"}\r\n                    // className={props.filter === \"completed\" ? \"active-filter\" : \"\"}\r\n                    onClick={setCompletedFilter}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, IconButton, Typography, Button, Toolbar, Container, Grid, Paper} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\ntype TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    const todolistId_1 = v1();\r\n    const todolistId_2 = v1();\r\n    let [todoLists, setTodoLists] = useState<Array<TodolistType>>([\r\n        {id: todolistId_1, title: 'what to learn', filter: 'all'},\r\n        {id: todolistId_2, title: 'what to buy', filter: 'all'},\r\n    ])\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [todolistId_1]: [\r\n            {id: v1(), title: \"JS\", isDone: false},\r\n            {id: v1(), title: \"CSS\", isDone: false},\r\n            {id: v1(), title: \"HTML\", isDone: true},\r\n        ],\r\n        [todolistId_2]: [\r\n            {id: v1(), title: \"Milk\", isDone: false},\r\n            {id: v1(), title: \"Bread\", isDone: false},\r\n            {id: v1(), title: \"Meat\", isDone: true},\r\n        ]\r\n    })\r\n\r\n    const removeTask = (taskID: string, todolistId: string) => {\r\n        tasks[todolistId] = tasks[todolistId].filter(t => t.id !== taskID)\r\n        setTasks({...tasks})\r\n    }\r\n    const addTask = (title: string, todolistId: string) => {\r\n        const newTask: TaskType = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        }\r\n        tasks[todolistId] = [newTask, ...tasks[todolistId]]\r\n        setTasks({...tasks})\r\n    }\r\n    const changeTaskStatus = (taskID: string, isDone: boolean, todolistId: string) => {\r\n        tasks[todolistId] = tasks[todolistId].map(t => t.id === taskID ? {...t, isDone} : t)\r\n        setTasks({...tasks})\r\n    }\r\n    const changeTodoListFilter = (filter: FilterValuesType, todolistId: string) => {\r\n        setTodoLists(todoLists.map(t => t.id === todolistId ? {...t, filter} : t))\r\n    }\r\n    const changeTaskTitle = (taskID: string, title: string, todolistId: string) => {\r\n        tasks[todolistId] = tasks[todolistId].map(t => t.id === taskID ? {...t, title} : t)\r\n        setTasks({...tasks})\r\n    }\r\n    const removeTodolist = (todolistId: string) => {\r\n        setTodoLists(todoLists.filter(t => t.id !== todolistId))\r\n        delete tasks[todolistId]\r\n    }\r\n    const addTodolist = (title: string) => {\r\n        const todolistId = v1()\r\n        setTodoLists([...todoLists, {\r\n            id: todolistId,\r\n            title, //title = title\r\n            filter: \"all\"\r\n        }])\r\n        setTasks({...tasks, [todolistId]: []})\r\n    }\r\n    const changeTodolistTitle = (title: string, todolistId: string) => {\r\n        // todoLists = todoLists.map(t => t.id === todolistId ? {...t, title} : t)\r\n        // setTodoLists([...todoLists])\r\n        setTodoLists(todoLists.map(t => t.id === todolistId ? {...t, title} : t))\r\n    }\r\n\r\n    const todolistsComponents = todoLists.map(t => {\r\n        let tasksForRender = tasks[t.id]\r\n        if (t.filter === \"active\") {\r\n            tasksForRender = tasks[t.id].filter(t => !t.isDone)\r\n        }\r\n        if (t.filter === \"completed\") {\r\n            tasksForRender = tasks[t.id].filter(t => t.isDone)\r\n        }\r\n        return (\r\n\r\n                <Grid item key={t.id} style={{maxWidth: '500px'}}>\r\n                    <Paper  elevation={8} style={{padding: \"40px\"}}>\r\n                        <TodoList\r\n                            key={t.id}\r\n                            id={t.id}\r\n                            filter={t.filter}\r\n                            title={t.title}\r\n                            tasks={tasksForRender}\r\n                            addTask={addTask}\r\n                            removeTask={removeTask}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            changeTodoListFilter={changeTodoListFilter}\r\n                            removeTodolist={removeTodolist}\r\n                            addTodolist={addTodolist}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            changeTodolistTitle={changeTodolistTitle}/>\r\n                    </Paper>\r\n                </Grid>\r\n\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge={\"start\"} color=\"inherit\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button\r\n                        variant={\"outlined\"}\r\n                        color=\"inherit\"\r\n                    >\r\n                        Login\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container maxWidth={'xl'}>\r\n                <Grid\r\n                    container\r\n                    style={{justifyContent: 'center', padding: \"15px\"}}\r\n                >\r\n                    <Grid\r\n                        item\r\n                    >\r\n                        <AddItemForm AddItemForm={addTodolist}/>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid\r\n                    container\r\n                    spacing={6}\r\n                    style={{justifyContent: 'center'}}\r\n                >\r\n                    {todolistsComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}